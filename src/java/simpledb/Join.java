package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate joinPredicate;
    private OpIterator childOp1;
    private OpIterator childOp2;
    private Tuple left;

    /**
     * Constructor. Accepts two children to join and the predicate to join them on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.childOp1 = child1;
        this.childOp2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.joinPredicate;
        // return null;
    }

    /**
     * @return the field name of join field1. Should be quantified by alias or table
     *         name.
     */
    public String getJoinField1Name() {
        // some code goes here
        int fieldId1 = this.joinPredicate.getField1();
        return this.childOp1.getTupleDesc().getFieldName(fieldId1);
        // return null;
    }

    /**
     * @return the field name of join field2. Should be quantified by alias or table
     *         name.
     */
    public String getJoinField2Name() {
        // some code goes here
        int fieldId2 = this.joinPredicate.getField2();
        return this.childOp2.getTupleDesc().getFieldName(fieldId2);
        // return null;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(this.childOp1.getTupleDesc(), this.childOp2.getTupleDesc());
        // return null;
    }

    public void open() throws DbException, NoSuchElementException, TransactionAbortedException {
        // some code goes here
        super.open();
        this.childOp1.open();
        this.childOp2.open();
        this.left = this.childOp1.hasNext() ? this.childOp1.next() : null;
    }

    public void close() {
        // some code goes here
        this.childOp1.close();
        this.childOp2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.close();
        this.open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more
     * tuples. Logically, this is the next tuple in r1 cross r2 that satisfies the
     * join predicate. There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join are
     * simply the concatenation of joining tuples from the left and right relation.
     * Therefore, if an equality predicate is used there will be two copies of the
     * join attribute in the results. (Removing such duplicate columns can be done
     * with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6}, joined
     * on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        while (this.left != null) {
            while (this.childOp2.hasNext()) {
                Tuple right = childOp2.next();
                if (this.joinPredicate.filter(left, right)) {
                    return this.joinTuples(left, right);
                }
            }
            this.childOp2.rewind();
            this.left = this.childOp1.hasNext() ? this.childOp1.next() : null;
        }
        return null;
    }

    private Tuple joinTuples(Tuple t1, Tuple t2) {
        TupleDesc td = this.getTupleDesc();
        Tuple tp = new Tuple(td);
        int cnt = 0;

        for (Tuple t : Arrays.asList(t1, t2)) {
            Iterator<Field> it = t.fields();
            while (it.hasNext() && cnt < td.numFields()) {
                tp.setField(cnt++, it.next());
            }
        }
        return tp;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[] { this.childOp1, this.childOp2 };
        // return null;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        assert children.length == 2;
        this.childOp1 = children[0];
        this.childOp2 = children[1];
    }

}
